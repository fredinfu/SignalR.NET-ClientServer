@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavManager
@implements IAsyncDisposable

@* <div class="form-group">
    <label>
        User: <input @bind="userInput" />
    </label>
</div> *@

<div class="form-group">
    <label>
        Message: <input @bind="messageInput" />
    </label>
</div>

<button @onclick="Send" disabled="@(IsConnected == false)">Send</button>

<hr />

<div class="form-group">
    <label>
        ConnectionId: <input @bind="userConnectionId" />
    </label>
</div>



<button @onclick="Disconnect" >Disconnect</button>

<hr />
<label>Server Connection Id: @hubConnectionId</label>
<ul>

    @foreach (var message in Messages)
    {
        <li>(ConnectionId @message.ConnectionId): @message.Text <button @onclick="() => Disconnect(message.ConnectionId)">Disconnect user</button></li>
    }
</ul>

@code {
    public struct LoginMessage { public string ConnectionId { get; set; } public string Text { get; set; }}

    private HubConnection? hubConnection;
    private List<LoginMessage> Messages;

    private string? messageInput;
    private string? userConnectionId;
    private string? hubConnectionId;

    protected override async Task OnInitializedAsync()
    {
        Messages = new List<LoginMessage>();
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/loginhub"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {

            Messages.Add(new LoginMessage
            {
                ConnectionId = user,
                Text = message
            });
            InvokeAsync(StateHasChanged);


        });

        await hubConnection.StartAsync();
        hubConnectionId = hubConnection.ConnectionId;

    }

    private async Task Send()
    {
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("SendMessage", hubConnection.ConnectionId, messageInput);
        }
    }

    private async Task Disconnect()
    {
        if(hubConnection is not null)
        {
            await hubConnection.SendAsync("DisconnectUser", userConnectionId, "Logout");
        }
    }

    private async Task Disconnect(string connectionId)
    {
        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("DisconnectUser", connectionId, $"You have been disconnected by: {hubConnectionId}");
            await hubConnection.SendAsync("SendMessage", hubConnection.ConnectionId, $"Server {hubConnectionId} has disconnect client: {connectionId}");
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    } 
}